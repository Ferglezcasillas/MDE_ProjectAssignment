[comment encoding = UTF-8 /]
[**
 * The documentation of the module generate.
 */]
[module generate('http://www.example.org/structureAndBehaviour')]


[**
 * The documentation of the template generateLan.
 * @param aClass
 */]
[template public generateLan(structure : structureAndBehaviour::Program)]
[comment @main/]
[for (c : Class | structure.class)][generateClass(c)/][/for]
[/template]

[template public generateClass(class : Class)]
[file (class.name+'.java', false, 'UTF-8')]
[class.accessType/] class [class.name/][if (not class.implements.oclIsUndefined())] implements [class.implements.name/] [/if][if (not class.inherated.oclIsUndefined())] extends [class.inherated.name/][/if]
{
[for (v : Variable | class.variable)][generateVariableCode(v)/];
[/for]

[for (m : Function | class.method)][generateMethodsCode(m)/]
[/for]

}
[/file]
[/template]

[template public generateVariableCode(v : Variable)]
	[v.accessType /] [getTypeVariable(v)/] [v.name /]
[/template]

[template public generateMethodsCode(m : Function)]
	[m.accessType /] [if (m.return.oclIsUndefined())]void [else][getTypeVariable(m.return)/] [/if] [m.name/] ([getParameterMethod(m.parameters)/])
	[for (b : BlockOfCode | m.blockofcode)][getBlackOfCode(b)/][/for]
[/template]

[template public getParameterMethod(listP : OrderedSet(Variable))]
[for (v : Variable | listP) separator(', ')][getTypeVariable(v)/] [v.name/][/for]
[/template]

[template public getTypeVariable(v:Variable)]
[if (v.oclIsKindOf(Primative))][v.oclAsType(Primative).type/][/if][if (v.oclIsKindOf(List))]List<[v.oclAsType(List).type/]>[/if][if (v.oclIsKindOf(Complex))][v.oclAsType(Complex).class.name/][/if]
[/template]






[template public getBlackOfCode(b : BlockOfCode)]
{
[for (thing : generalItem | b.things)]
	[if (thing.oclIsKindOf(Expression))]	[getExternalExpression(thing.oclAsType(Expression))/];[/if][if (thing.oclIsKindOf(Statement) and not thing.oclIsUndefined())]	[getStatement(thing.oclAsType(Statement))/] [/if]
[/for]
}
[/template]

[template public getExternalExpression(e : Expression)]
[if (e.oclIsTypeOf(Variable) and not e.oclAsType(Variable).initialization.oclIsUndefined())]
[getVariableType(e.oclAsType(Variable))/] [e.oclAsType(Variable).name/]=[e.oclAsType(Variable).initialization/][else]
[if (not e.assign.oclIsUndefined())]
[e.assign.name/]=[/if]
[if (e.oclIsKindOf(Operation))][getOperation(e.oclAsType(Operation))/][/if][if (e.oclIsKindOf(CallFunction))][getFunction(e.oclAsType(CallFunction))/][/if][if (e.oclIsKindOf(Variable))][e.oclAsType(Variable).name/][/if][if (e.oclIsKindOf(NotOperation))]![e.oclAsType(NotOperation).input.name/][/if][/if]
[/template]

[template public getExpression(e : Expression)]
[if (not e.assign.oclIsUndefined())]
[e.assign.name/]=
[/if]
[if (e.oclIsKindOf(Operation))][getOperation(e.oclAsType(Operation))/][/if][if (e.oclIsTypeOf(CallFunction))][getFunction(e.oclAsType(CallFunction))/][/if][if (e.oclIsTypeOf(Variable))][e.oclAsType(Variable).name/][/if][if (e.oclIsTypeOf(NotOperation))]![e.oclAsType(NotOperation).input.name/][/if]
[/template]


[template public getStatement(s : Statement)]
	[if (s.oclIsKindOf(for_))]
for([s.oclAsType(for_).variable.name/]=[s.oclAsType(for_).variable.initialization/];[getOperation(s.oclAsType(for_).comparation)/];[s.oclAsType(for_).variable.name/][if (s.oclAsType(for_).inc)]++[else]--[/if])
[getBlackOfCode(s._body)/]
	[else]
	[if (s.oclIsKindOf(while_))]
while([s.oclAsType(ConditionalStatement).condition.leftInput.oclAsType(Variable).name/][s.oclAsType(ConditionalStatement).condition.type/][s.oclAsType(ConditionalStatement).condition.rightInput.oclAsType(Variable).name/]   [comment][getOperation(s.oclAsType(ConditionalStatement).condition)/][/comment])
[getBlackOfCode(s._body)/]
	[/if]
	[if (s.oclIsKindOf(dowhile_))]
do
[getBlackOfCode(s._body)/]
while([getOperation(s.oclAsType(ConditionalStatement).condition)/])
	[/if]
	[if (s.oclIsKindOf(if_))]
if([getOperation(s.oclAsType(ConditionalStatement).condition)/])
[getBlackOfCode(s._body)/][if (not s.oclAsType(if_).elseBody.oclIsUndefined())]
else
[getBlackOfCode(s.oclAsType(if_).elseBody)/]
	[/if]
	[/if]
	[/if]
[/template]


[template public getOperation(o : Operation)]
[if (o.oclIsTypeOf(Math))][getOperation(o.oclAsType(Math))/][/if]
[if (o.oclIsTypeOf(Comparation))][getOperation(o.oclAsType(Comparation))/][/if]
[if (o.oclIsTypeOf(Logical))][getOperation(o.oclAsType(Logical))/][/if]
[/template]

[template public getOperation(l : Logical)]
([getExpression(l.leftInput)/][l.type/][getExpression(l.rightInput)/])
[/template]

[template public getOperation(c : Comparation)]
([getExpression(c.leftInput)/][c.type/][getExpression(c.rightInput)/])
[/template]

[template public getOperation(m : Math)]
([getExpression(m.leftInput)/][m.type/][getExpression(m.rightInput)/])
[/template]

[template public getFunction(f : CallFunction)]
[if (f.oclIsTypeOf(System_Input))]System.input()[/if][if (f.oclIsTypeOf(System_Output))]System.output([getParameterFunction(f.oclAsType(System_Output).parameters)/])[/if][if (f.oclIsTypeOf(userDefinedFunction))]Functio...usert()[/if]
[/template]

[template public getParameterFunction(listP : OrderedSet(Variable))]
[for (v : Variable | listP) separator(', ')][v.name/][/for]
[/template]

[template public getVariableType(v : Variable)]
[if(v.type.toString()='NOTPRIMITIVE')][v.oclAsType(Complex).class.name/][else][v.type/][/if]
[/template]



