/**
 */
package structureAndBehaviour.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import structureAndBehaviour.util.StructureAndBehaviourAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class StructureAndBehaviourItemProviderAdapterFactory extends StructureAndBehaviourAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public StructureAndBehaviourItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link structureAndBehaviour.Primative} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrimativeItemProvider primativeItemProvider;

	/**
	 * This creates an adapter for a {@link structureAndBehaviour.Primative}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrimativeAdapter() {
		if (primativeItemProvider == null) {
			primativeItemProvider = new PrimativeItemProvider(this);
		}

		return primativeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structureAndBehaviour.Interface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InterfaceItemProvider interfaceItemProvider;

	/**
	 * This creates an adapter for a {@link structureAndBehaviour.Interface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInterfaceAdapter() {
		if (interfaceItemProvider == null) {
			interfaceItemProvider = new InterfaceItemProvider(this);
		}

		return interfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structureAndBehaviour.Program} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProgramItemProvider programItemProvider;

	/**
	 * This creates an adapter for a {@link structureAndBehaviour.Program}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProgramAdapter() {
		if (programItemProvider == null) {
			programItemProvider = new ProgramItemProvider(this);
		}

		return programItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structureAndBehaviour.Class} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClassItemProvider classItemProvider;

	/**
	 * This creates an adapter for a {@link structureAndBehaviour.Class}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClassAdapter() {
		if (classItemProvider == null) {
			classItemProvider = new ClassItemProvider(this);
		}

		return classItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structureAndBehaviour.Complex} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComplexItemProvider complexItemProvider;

	/**
	 * This creates an adapter for a {@link structureAndBehaviour.Complex}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComplexAdapter() {
		if (complexItemProvider == null) {
			complexItemProvider = new ComplexItemProvider(this);
		}

		return complexItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structureAndBehaviour.CallFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CallFunctionItemProvider callFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link structureAndBehaviour.CallFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCallFunctionAdapter() {
		if (callFunctionItemProvider == null) {
			callFunctionItemProvider = new CallFunctionItemProvider(this);
		}

		return callFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structureAndBehaviour.ConditionalStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionalStatementItemProvider conditionalStatementItemProvider;

	/**
	 * This creates an adapter for a {@link structureAndBehaviour.ConditionalStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionalStatementAdapter() {
		if (conditionalStatementItemProvider == null) {
			conditionalStatementItemProvider = new ConditionalStatementItemProvider(this);
		}

		return conditionalStatementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structureAndBehaviour.dowhile_} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected dowhile_ItemProvider dowhile_ItemProvider;

	/**
	 * This creates an adapter for a {@link structureAndBehaviour.dowhile_}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createdowhile_Adapter() {
		if (dowhile_ItemProvider == null) {
			dowhile_ItemProvider = new dowhile_ItemProvider(this);
		}

		return dowhile_ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structureAndBehaviour.generalItem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected generalItemItemProvider generalItemItemProvider;

	/**
	 * This creates an adapter for a {@link structureAndBehaviour.generalItem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter creategeneralItemAdapter() {
		if (generalItemItemProvider == null) {
			generalItemItemProvider = new generalItemItemProvider(this);
		}

		return generalItemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structureAndBehaviour.for_} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected for_ItemProvider for_ItemProvider;

	/**
	 * This creates an adapter for a {@link structureAndBehaviour.for_}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createfor_Adapter() {
		if (for_ItemProvider == null) {
			for_ItemProvider = new for_ItemProvider(this);
		}

		return for_ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structureAndBehaviour.Function} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionItemProvider functionItemProvider;

	/**
	 * This creates an adapter for a {@link structureAndBehaviour.Function}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionAdapter() {
		if (functionItemProvider == null) {
			functionItemProvider = new FunctionItemProvider(this);
		}

		return functionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structureAndBehaviour.Operation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperationItemProvider operationItemProvider;

	/**
	 * This creates an adapter for a {@link structureAndBehaviour.Operation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperationAdapter() {
		if (operationItemProvider == null) {
			operationItemProvider = new OperationItemProvider(this);
		}

		return operationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structureAndBehaviour.Statement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StatementItemProvider statementItemProvider;

	/**
	 * This creates an adapter for a {@link structureAndBehaviour.Statement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStatementAdapter() {
		if (statementItemProvider == null) {
			statementItemProvider = new StatementItemProvider(this);
		}

		return statementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structureAndBehaviour.Variable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableItemProvider variableItemProvider;

	/**
	 * This creates an adapter for a {@link structureAndBehaviour.Variable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableAdapter() {
		if (variableItemProvider == null) {
			variableItemProvider = new VariableItemProvider(this);
		}

		return variableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structureAndBehaviour.System_Output} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected System_OutputItemProvider system_OutputItemProvider;

	/**
	 * This creates an adapter for a {@link structureAndBehaviour.System_Output}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSystem_OutputAdapter() {
		if (system_OutputItemProvider == null) {
			system_OutputItemProvider = new System_OutputItemProvider(this);
		}

		return system_OutputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structureAndBehaviour.NotOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NotOperationItemProvider notOperationItemProvider;

	/**
	 * This creates an adapter for a {@link structureAndBehaviour.NotOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNotOperationAdapter() {
		if (notOperationItemProvider == null) {
			notOperationItemProvider = new NotOperationItemProvider(this);
		}

		return notOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structureAndBehaviour.List} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ListItemProvider listItemProvider;

	/**
	 * This creates an adapter for a {@link structureAndBehaviour.List}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createListAdapter() {
		if (listItemProvider == null) {
			listItemProvider = new ListItemProvider(this);
		}

		return listItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structureAndBehaviour.Logical} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogicalItemProvider logicalItemProvider;

	/**
	 * This creates an adapter for a {@link structureAndBehaviour.Logical}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogicalAdapter() {
		if (logicalItemProvider == null) {
			logicalItemProvider = new LogicalItemProvider(this);
		}

		return logicalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structureAndBehaviour.Comparation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComparationItemProvider comparationItemProvider;

	/**
	 * This creates an adapter for a {@link structureAndBehaviour.Comparation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComparationAdapter() {
		if (comparationItemProvider == null) {
			comparationItemProvider = new ComparationItemProvider(this);
		}

		return comparationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structureAndBehaviour.Math} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MathItemProvider mathItemProvider;

	/**
	 * This creates an adapter for a {@link structureAndBehaviour.Math}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMathAdapter() {
		if (mathItemProvider == null) {
			mathItemProvider = new MathItemProvider(this);
		}

		return mathItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structureAndBehaviour.Expression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExpressionItemProvider expressionItemProvider;

	/**
	 * This creates an adapter for a {@link structureAndBehaviour.Expression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExpressionAdapter() {
		if (expressionItemProvider == null) {
			expressionItemProvider = new ExpressionItemProvider(this);
		}

		return expressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structureAndBehaviour.while_} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected while_ItemProvider while_ItemProvider;

	/**
	 * This creates an adapter for a {@link structureAndBehaviour.while_}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createwhile_Adapter() {
		if (while_ItemProvider == null) {
			while_ItemProvider = new while_ItemProvider(this);
		}

		return while_ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structureAndBehaviour.userDefinedFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected userDefinedFunctionItemProvider userDefinedFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link structureAndBehaviour.userDefinedFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createuserDefinedFunctionAdapter() {
		if (userDefinedFunctionItemProvider == null) {
			userDefinedFunctionItemProvider = new userDefinedFunctionItemProvider(this);
		}

		return userDefinedFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structureAndBehaviour.if_} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected if_ItemProvider if_ItemProvider;

	/**
	 * This creates an adapter for a {@link structureAndBehaviour.if_}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createif_Adapter() {
		if (if_ItemProvider == null) {
			if_ItemProvider = new if_ItemProvider(this);
		}

		return if_ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structureAndBehaviour.System_Input} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected System_InputItemProvider system_InputItemProvider;

	/**
	 * This creates an adapter for a {@link structureAndBehaviour.System_Input}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSystem_InputAdapter() {
		if (system_InputItemProvider == null) {
			system_InputItemProvider = new System_InputItemProvider(this);
		}

		return system_InputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link structureAndBehaviour.BlockOfCode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BlockOfCodeItemProvider blockOfCodeItemProvider;

	/**
	 * This creates an adapter for a {@link structureAndBehaviour.BlockOfCode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBlockOfCodeAdapter() {
		if (blockOfCodeItemProvider == null) {
			blockOfCodeItemProvider = new BlockOfCodeItemProvider(this);
		}

		return blockOfCodeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (primativeItemProvider != null)
			primativeItemProvider.dispose();
		if (interfaceItemProvider != null)
			interfaceItemProvider.dispose();
		if (programItemProvider != null)
			programItemProvider.dispose();
		if (classItemProvider != null)
			classItemProvider.dispose();
		if (complexItemProvider != null)
			complexItemProvider.dispose();
		if (callFunctionItemProvider != null)
			callFunctionItemProvider.dispose();
		if (conditionalStatementItemProvider != null)
			conditionalStatementItemProvider.dispose();
		if (dowhile_ItemProvider != null)
			dowhile_ItemProvider.dispose();
		if (generalItemItemProvider != null)
			generalItemItemProvider.dispose();
		if (for_ItemProvider != null)
			for_ItemProvider.dispose();
		if (functionItemProvider != null)
			functionItemProvider.dispose();
		if (operationItemProvider != null)
			operationItemProvider.dispose();
		if (statementItemProvider != null)
			statementItemProvider.dispose();
		if (variableItemProvider != null)
			variableItemProvider.dispose();
		if (system_OutputItemProvider != null)
			system_OutputItemProvider.dispose();
		if (notOperationItemProvider != null)
			notOperationItemProvider.dispose();
		if (listItemProvider != null)
			listItemProvider.dispose();
		if (logicalItemProvider != null)
			logicalItemProvider.dispose();
		if (comparationItemProvider != null)
			comparationItemProvider.dispose();
		if (mathItemProvider != null)
			mathItemProvider.dispose();
		if (expressionItemProvider != null)
			expressionItemProvider.dispose();
		if (while_ItemProvider != null)
			while_ItemProvider.dispose();
		if (userDefinedFunctionItemProvider != null)
			userDefinedFunctionItemProvider.dispose();
		if (if_ItemProvider != null)
			if_ItemProvider.dispose();
		if (system_InputItemProvider != null)
			system_InputItemProvider.dispose();
		if (blockOfCodeItemProvider != null)
			blockOfCodeItemProvider.dispose();
	}

}
