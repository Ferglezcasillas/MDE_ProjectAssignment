/**
 */
package behaviourLanguage.provider;

import behaviourLanguage.util.BehaviourLanguageAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class BehaviourLanguageItemProviderAdapterFactory extends BehaviourLanguageAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BehaviourLanguageItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourLanguage.BlockOfCode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BlockOfCodeItemProvider blockOfCodeItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourLanguage.BlockOfCode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBlockOfCodeAdapter() {
		if (blockOfCodeItemProvider == null) {
			blockOfCodeItemProvider = new BlockOfCodeItemProvider(this);
		}

		return blockOfCodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourLanguage.for_} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected for_ItemProvider for_ItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourLanguage.for_}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createfor_Adapter() {
		if (for_ItemProvider == null) {
			for_ItemProvider = new for_ItemProvider(this);
		}

		return for_ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourLanguage.while_} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected while_ItemProvider while_ItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourLanguage.while_}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createwhile_Adapter() {
		if (while_ItemProvider == null) {
			while_ItemProvider = new while_ItemProvider(this);
		}

		return while_ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourLanguage.if_} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected if_ItemProvider if_ItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourLanguage.if_}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createif_Adapter() {
		if (if_ItemProvider == null) {
			if_ItemProvider = new if_ItemProvider(this);
		}

		return if_ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourLanguage.dowhile_} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected dowhile_ItemProvider dowhile_ItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourLanguage.dowhile_}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createdowhile_Adapter() {
		if (dowhile_ItemProvider == null) {
			dowhile_ItemProvider = new dowhile_ItemProvider(this);
		}

		return dowhile_ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourLanguage.Math} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MathItemProvider mathItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourLanguage.Math}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMathAdapter() {
		if (mathItemProvider == null) {
			mathItemProvider = new MathItemProvider(this);
		}

		return mathItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourLanguage.Logical} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogicalItemProvider logicalItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourLanguage.Logical}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogicalAdapter() {
		if (logicalItemProvider == null) {
			logicalItemProvider = new LogicalItemProvider(this);
		}

		return logicalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourLanguage.Variable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableItemProvider variableItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourLanguage.Variable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableAdapter() {
		if (variableItemProvider == null) {
			variableItemProvider = new VariableItemProvider(this);
		}

		return variableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourLanguage.else_} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected else_ItemProvider else_ItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourLanguage.else_}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createelse_Adapter() {
		if (else_ItemProvider == null) {
			else_ItemProvider = new else_ItemProvider(this);
		}

		return else_ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourLanguage.Function} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionItemProvider functionItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourLanguage.Function}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionAdapter() {
		if (functionItemProvider == null) {
			functionItemProvider = new FunctionItemProvider(this);
		}

		return functionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourLanguage.Comparation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComparationItemProvider comparationItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourLanguage.Comparation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComparationAdapter() {
		if (comparationItemProvider == null) {
			comparationItemProvider = new ComparationItemProvider(this);
		}

		return comparationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourLanguage.NotOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NotOperationItemProvider notOperationItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourLanguage.NotOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNotOperationAdapter() {
		if (notOperationItemProvider == null) {
			notOperationItemProvider = new NotOperationItemProvider(this);
		}

		return notOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourLanguage.System_Input} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected System_InputItemProvider system_InputItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourLanguage.System_Input}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSystem_InputAdapter() {
		if (system_InputItemProvider == null) {
			system_InputItemProvider = new System_InputItemProvider(this);
		}

		return system_InputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourLanguage.System_Output} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected System_OutputItemProvider system_OutputItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourLanguage.System_Output}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSystem_OutputAdapter() {
		if (system_OutputItemProvider == null) {
			system_OutputItemProvider = new System_OutputItemProvider(this);
		}

		return system_OutputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourLanguage.userDefinedFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected userDefinedFunctionItemProvider userDefinedFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourLanguage.userDefinedFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createuserDefinedFunctionAdapter() {
		if (userDefinedFunctionItemProvider == null) {
			userDefinedFunctionItemProvider = new userDefinedFunctionItemProvider(this);
		}

		return userDefinedFunctionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (blockOfCodeItemProvider != null)
			blockOfCodeItemProvider.dispose();
		if (for_ItemProvider != null)
			for_ItemProvider.dispose();
		if (while_ItemProvider != null)
			while_ItemProvider.dispose();
		if (if_ItemProvider != null)
			if_ItemProvider.dispose();
		if (dowhile_ItemProvider != null)
			dowhile_ItemProvider.dispose();
		if (mathItemProvider != null)
			mathItemProvider.dispose();
		if (logicalItemProvider != null)
			logicalItemProvider.dispose();
		if (variableItemProvider != null)
			variableItemProvider.dispose();
		if (else_ItemProvider != null)
			else_ItemProvider.dispose();
		if (functionItemProvider != null)
			functionItemProvider.dispose();
		if (comparationItemProvider != null)
			comparationItemProvider.dispose();
		if (notOperationItemProvider != null)
			notOperationItemProvider.dispose();
		if (system_InputItemProvider != null)
			system_InputItemProvider.dispose();
		if (system_OutputItemProvider != null)
			system_OutputItemProvider.dispose();
		if (userDefinedFunctionItemProvider != null)
			userDefinedFunctionItemProvider.dispose();
	}

}
